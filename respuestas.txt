18: Sale un nil. Ese es el resultado de la expresión. puts siempre retorna nil, que es el valor que significa “absolutamente nada” en Ruby.

21: 
Con comillas simples interpreta literalmente los caracteres mientras que con
comillas dobles los sustituye por tabulador y retorno de carro

22:
%q{} le añade comillas simples
%q{hello world\n} nos da la cadena con comillas simples. De esta forma no se sustituye el \n por un retorno de carro

%q{'a' 'b' 'c'} nos da la cadena tal cual incluidas las comillas simples, en notación de comillas dobles: "'a' 'b' 'c'"

23:
%Q{} le añade comillas dobles
%Q{hello world\n} nos da la cadena con comillas dobles. Se sustituye el \n por un retorno de carro

%Q{'a' 'b' 'c'} nos da la cadena tal cual incluidas las comillas:  "'a' 'b' 'c'"

24:"--4--\n--2--\n"
25: "--\#{a}--\n--\#{b}--\n"
26:
s[0,2]: "he"
s[-1,1]: "o" 
s[0,10]: "hello" 

27:"hello world"
 
28:"..."
 
29:"#a{a=a+1} #a{a=a+1} #a{a=a+1} " 

30: ["this", "is", "a", "test"] 
Un array con las palabras del texto entre corchetes

31: ["\\t", "\\n"] , al hacer las cadenas de caracteres las escapa con comillas simples, por lo que no sustituye los caracteres especiales

32: ["\t", "\n"] , lo mismo pero con comillas dobles. Interpreta los caracteres especiales.

33:[nil, nil, nil] un array con tres elementos con valor nil

34:[0, 0, 0] un array con tres elementos inicializados a nil

35:[[1, 2], [3, 4]]  Un array igual a x

36:[0, 2, 4] un array de tres elementos, cada uno inicializado con una función que le da el doble de su indice como valor

37:
a[1,1]: ["b"]
a[-2,2]:["d", "e"] 
a[0..2]:["a", "b", "c"]
a[0...1]:["a"] 
a[-2..-1]: ["d", "e"]

38:
a[0,2] = %w{A B}
Resultado:
a  => ["A", "B", "c", "d", "e"] 

a[2..5] = %w{C D E}
Resultado:
a  => ["A", "B", "C", "D", "E"] 

a[0,0] = [1,2,3] 
Resultado:
a => [1, 2, 3, "A", "B", "C", "D", "E"] 

a[0,2] = []
Resultado:
a => [3, "A", "B", "C", "D", "E"] 

a[-1,1] = ['Z']
Resultado:
a => [3, "A", "B", "C", "D", "Z"] 

a[-2,2] = nil
Resultado:
a => [3, "A", "B", "C", nil] 

39:
a = (1...4).to_a
Resultado:
a => [1, 2, 3] 

a = a + [4, 5]
a => [1, 2, 3, 4, 5]

a += [[6, 7, 8]]
a => [1, 2, 3, 4, 5, [6, 7, 8]]

a = a + 9                                                                          
TypeError: no implicit conversion of Fixnum into Array
        from (irb):61:in `+'
        from (irb):61
        from /usr/local/rvm/rubies/ruby-2.0.0-p247/bin/irb:13:in `<main>'

40:
x = %w{a b c b a}
 => ["a", "b", "c", "b", "a"]

x = x - %w{b c d}
 => ["a", "a"]

41:
z = [0]*8
 => [0, 0, 0, 0, 0, 0, 0, 0] 

42: 
a << 1
 => [1] 

a << 2 << 3
 => [1, 2, 3] 

a << [4, 5, 6]
 => [1, 2, 3, [4, 5, 6]] 

a.concat [7, 8]
 => [1, 2, 3, [4, 5, 6], 7, 8] 

43:
a = [1, 1, 2, 2, 3, 3, 4]
 => [1, 1, 2, 2, 3, 3, 4] 

 b = [5, 5, 4, 4, 3, 3, 2]
 => [5, 5, 4, 4, 3, 3, 2] 

c = a | b
 => [1, 2, 3, 4, 5]

d = b | a
 => [5, 4, 3, 2, 1] 

 e = a & b
 => [2, 3, 4] 

f = b & a
 => [4, 3, 2] 

44:
a.to_a
 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 

b.to_a
 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 

b.include? 10
 => false 

b.include? 8
 => true 

b.step(2) {|x| print "#{x} " }
1 3 5 7 9  => 1...10 

1..3.to_a
NoMethodError: undefined method `to_a' for 3:Fixnum
        from (irb):24
        from /usr/local/rvm/rubies/ruby-2.0.0-p247/bin/irb:13:in `<main>'

45:

r.member? 50
 => true

r.include? 99.9
 => true

r.member? 99.9
 => true 

46:
true.class
 => TrueClass

false.class
 => FalseClass

puts "hello" if 0
hello
 => nil 

puts "hello" if nil
 => nil
 
puts "hello" if ""
(irb):33: warning: string literal in condition
hello
 => nil 

47:
x.class
 => Symbol

x == 'sym'
 => false 


x == :sym
 => true 

z = :'a long symbol'
 => :"a long symbol" 

z.class
 => Symbol 

x == 'sym'.to_sym
 => true 

x.to_s == 'sym'
 => true

48:
print s
Rub => nil 

print s, t
RubJava => nil 

49:
 "%d %s" % [3, "rubies"]
 => "3 rubies" 

50:
x, y = 4, 5
 => [4, 5] 
x
 => 4 
y
 => 5 

z = x > y ? x : y
 => 5 

x,y,z = [1,2,3]
 => [1, 2, 3] 
x
 => 1 
y
 => 2 
z
 => 3 

51:
x.keys
 => [:a, :b]

x.values
 => [1, 2]

x
 => {:a=>1, :b=>2, :c=>3}

x
 => {:a=>1, :b=>2, :c=>3}

x
 => {:b=>2, :c=>3} 

x.delete_if { |k,v| v % 2 == 0 }
 => {:a=>1} 

 x
 => {:a=>1} 

52:
Ejecuta el bloque de código pasado como parametro a la función con los valores 4 y 5 como parámetros

53:
Crea un hash vacio en conts con valor por defecto 0. La diferencia entre {} y Hash.new(0) es que el valor por defecto del hash será nil en el primer caso y 0 en el segundo

counts = {}
 => {} 
counts["hola"]
 => nil 
counts = Hash.new(0)
 => {} 
counts["hola"]
 => 0 

54:
'hello world, hello LPP'.scan /\w+/
 => ["hello", "world", "hello", "LPP"] 

Un array con las palabras de la frase como elementos. Hace uso de expresiones regulares.

55:
c = { :a => 3, :b => 2, :c => 1 }
 => {:a=>3, :b=>2, :c=>1}

c.keys.sort.each { |k| puts c[k] }
3
2
1
 => [:a, :b, :c] 

Ordena las claves del hash c y a cada una de ellas las usa para mostrar su valor en el hash (puts c[k] )

